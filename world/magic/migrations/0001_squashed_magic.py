# Generated by Django 2.2.16 on 2020-11-22 10:24

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [
        ("magic", "0001_initial"),
        ("magic", "0002_auto_20181113_2246"),
        ("magic", "0003_alchemicalmaterial_description"),
        ("magic", "0004_alchemicalmaterial_plural_name"),
        ("magic", "0005_magic_system_initial"),
        ("magic", "0006_auto_20181202_2018"),
        ("magic", "0007_auto_20181202_2052"),
    ]

    initial = True

    dependencies = [
        ("objects", "0009_remove_objectdb_db_player"),
    ]

    operations = [
        migrations.CreateModel(
            name="Affinity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "opposed",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="magic.Affinity",
                    ),
                ),
                ("rank1_desc", models.CharField(default="spark", max_length=255)),
                ("rank2_desc", models.CharField(default="glimmer", max_length=255)),
                ("rank3_desc", models.CharField(default="glow", max_length=255)),
                ("rank4_desc", models.CharField(default="light", max_length=255)),
                ("rank5_desc", models.CharField(default="brilliance", max_length=255)),
            ],
            options={
                "abstract": False,
                "verbose_name_plural": "Affinities",
            },
        ),
        migrations.CreateModel(
            name="Alignment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20, unique=True)),
                ("alter_caster", models.BooleanField(default=False)),
                ("adjective", models.CharField(default="colorful", max_length=20)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Attunement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("raw_attunement_level", models.FloatField(default=0.0)),
                (
                    "obj",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attuned_by",
                        to="objects.ObjectDB",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Effect",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "target_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Self"),
                            (2, "Character"),
                            (3, "Object"),
                            (4, "Player or Object"),
                            (5, "Clue"),
                            (6, "Location"),
                            (7, "Retainer"),
                        ],
                        default=0,
                    ),
                ),
                ("weave_usable", models.BooleanField(default=True)),
                (
                    "coded_effect",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Sight"),
                            (1, "Add Clue to Collection"),
                            (2, "Add Successes to A Global Tally"),
                            (3, "Add to Primum Value of Object"),
                            (4, "Absorb Primum from an Object"),
                            (5, "Attune to Object, Player, or Agent"),
                            (6, "Boost a Stat"),
                            (7, "Ward a Location"),
                            (9, "Heal a Character"),
                            (10, "Simply Emits Flavor Text"),
                            (11, "Temporarily Reveal an Exploration Map"),
                            (12, "Apply a Combat Condition"),
                            (13, "Remove a Combat Condition"),
                            (14, "Apply a Combat Effect"),
                            (15, "Remove a Combat Effect"),
                            (16, "Change the Weather"),
                            (17, "Anima Ritual"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "coded_params",
                    models.CharField(
                        blank=True,
                        help_text="Parameters specific to the coded effect type.",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("base_difficulty", models.PositiveSmallIntegerField(default=70)),
                ("base_cost", models.PositiveSmallIntegerField(default=500)),
                (
                    "required_favor",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="A base amount of favor required to weave this effect.",
                    ),
                ),
                (
                    "antagonistic",
                    models.BooleanField(
                        default=False, help_text="Is this effect harmful to the target?"
                    ),
                ),
                (
                    "want_opposed",
                    models.BooleanField(
                        default=False,
                        help_text="Is this effect more effective when used on an opposed affinity? (If not, it will be more effective when used on the same affinity.)",
                    ),
                ),
                ("conditions", models.CharField(blank=True, max_length=255, null=True)),
                ("strength", models.PositiveSmallIntegerField(default=10)),
                ("success_msg", models.TextField(blank=True, null=True)),
                (
                    "affinity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="magic.Affinity",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MagicBucket",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=80)),
                ("gm_notes", models.TextField(blank=True, null=True)),
                ("value", models.PositiveIntegerField(default=0)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Practitioner",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("potential", models.PositiveIntegerField(default=1)),
                ("anima", models.PositiveIntegerField(default=1)),
                ("unspent_resonance", models.FloatField(default=0.0)),
                ("stat", models.CharField(default="intellect", max_length=40)),
                (
                    "skill",
                    models.CharField(default="occult", max_length=40),
                ),
                (
                    "language",
                    models.CharField(
                        default="Arvani",
                        help_text="The language in which this practitioner casts.",
                        max_length=20,
                    ),
                ),
                (
                    "verb",
                    models.CharField(
                        default="chants",
                        help_text="The verb (chants, sings, etc.) to describe this practitioner's casting style.",
                        max_length=20,
                    ),
                ),
                (
                    "gesture",
                    models.CharField(
                        default="gestures expansively and energetically",
                        help_text="Short descriptive fragment of how this practitioner casts.",
                        max_length=255,
                    ),
                ),
                (
                    "sigil_desc",
                    models.CharField(
                        blank=True,
                        help_text="What this person's magic looks for description as a signature (on wards and workings).",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "sigil_emit",
                    models.TextField(
                        blank=True,
                        help_text="The emit that's shown to mage-sight when this practitioner works magic.",
                        null=True,
                    ),
                ),
                (
                    "magic_desc_short",
                    models.CharField(
                        blank=True,
                        help_text="A short description of someone's magic, to be included in a generated sentence",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "magic_desc",
                    models.TextField(
                        blank=True,
                        help_text="Additional text someone might see if they soulgaze this practitioner with high successes.",
                        null=True,
                    ),
                ),
                (
                    "character",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="practitioner_record",
                        to="objects.ObjectDB",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerEffect",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "learned_by",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Staff Fiat"), (1, "Teaching"), (2, "Discovery")],
                        default=0,
                    ),
                ),
                ("learned_on", models.DateField(blank=True, null=True)),
                (
                    "learned_notes",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "effect",
                    models.ForeignKey(
                        default=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="known_by",
                        to="magic.Effect",
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        default=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="effect_discoveries",
                        to="magic.Practitioner",
                    ),
                ),
            ],
            options={
                "unique_together": {("practitioner", "effect")},
            },
        ),
        migrations.CreateModel(
            name="SkillNode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=40)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "eyes_open",
                    models.BooleanField(
                        default=False,
                        help_text="If set, then having this node open means someone's eyes are opened.",
                    ),
                ),
                ("auto_discover", models.BooleanField(default=False)),
                ("required_resonance", models.PositiveSmallIntegerField(default=10)),
                (
                    "affinity_default",
                    models.BooleanField(
                        default=False,
                        help_text="Does this node function as the default for this affinity in its tree?",
                    ),
                ),
                (
                    "affinity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="nodes",
                        to="magic.Affinity",
                    ),
                ),
                (
                    "parent_node",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_nodes",
                        to="magic.SkillNode",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SkillNodeEffect",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("auto_discover", models.BooleanField(default=False)),
                ("required_resonance", models.PositiveSmallIntegerField(default=0)),
                (
                    "effect",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_records",
                        to="magic.Effect",
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="effect_records",
                        to="magic.SkillNode",
                    ),
                ),
            ],
            options={
                "unique_together": {("node", "effect")},
            },
        ),
        migrations.CreateModel(
            name="SkillNodeResonance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("raw_resonance", models.FloatField(default=0.0)),
                (
                    "learned_by",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Staff Fiat"), (1, "Teaching"), (2, "Discovery")],
                        default=0,
                    ),
                ),
                ("learned_on", models.DateField(blank=True, null=True)),
                (
                    "learned_notes",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "teaching_multiplier",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                ("taught_by", models.CharField(blank=True, max_length=40, null=True)),
                ("taught_on", models.DateTimeField(blank=True, null=True)),
                (
                    "node",
                    models.ForeignKey(
                        default=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="known_by",
                        to="magic.SkillNode",
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        default=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_resonances",
                        to="magic.Practitioner",
                    ),
                ),
                ("practicing", models.BooleanField(default=False)),
            ],
            options={
                "unique_together": {("practitioner", "node")},
            },
        ),
        migrations.CreateModel(
            name="Spell",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=40)),
                ("description", models.TextField(blank=True, null=True)),
                ("auto_discover", models.BooleanField(default=False)),
                ("required_resonance", models.PositiveSmallIntegerField(default=1)),
                (
                    "required_favor",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="A base amount of favor required with Abyssal or Elysian to cast this spell.",
                    ),
                ),
                ("base_difficulty", models.PositiveSmallIntegerField(default=50)),
                ("base_cost", models.PositiveSmallIntegerField(default=50)),
                (
                    "extra_primum",
                    models.PositiveSmallIntegerField(
                        default=100,
                        help_text="What percentage of a player's anima can they pull from external sources for this spell?  100% means they can pull exactly as much as their maximum anima.",
                    ),
                ),
                ("success_msg", models.TextField(blank=True, null=True)),
                (
                    "affinity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="magic.Affinity",
                    ),
                ),
                (
                    "alignment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="magic.Alignment",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SpellEffect",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("primary", models.BooleanField(default=False)),
                (
                    "effect",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="magic.Effect",
                    ),
                ),
                (
                    "spell",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spell_effects",
                        to="magic.Spell",
                    ),
                ),
            ],
            options={
                "unique_together": {("spell", "effect")},
            },
        ),
        migrations.CreateModel(
            name="Working",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("template", models.BooleanField(default=False)),
                (
                    "template_name",
                    models.CharField(blank=True, max_length=40, null=True),
                ),
                (
                    "quiet_level",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "None"), (1, "Mundane"), (2, "Total")],
                        default=0,
                    ),
                ),
                ("intent", models.TextField(blank=True, null=True)),
                (
                    "target_string",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                ("econ", models.PositiveSmallIntegerField(blank=True, default=0)),
                ("gm_cost", models.PositiveIntegerField(blank=True, default=0)),
                (
                    "gm_difficulty",
                    models.PositiveSmallIntegerField(blank=True, default=0),
                ),
                (
                    "primum_at_perform",
                    models.PositiveSmallIntegerField(blank=True, default=0),
                ),
                (
                    "total_successes",
                    models.PositiveSmallIntegerField(blank=True, default=0),
                ),
                ("total_favor", models.PositiveIntegerField(blank=True, default=0)),
                ("effects_result", models.TextField(blank=True, null=True)),
                ("effects_description", models.TextField(blank=True, null=True)),
                ("consequence_result", models.TextField(blank=True, null=True)),
                ("consequence_description", models.TextField(blank=True, null=True)),
                ("calculated", models.BooleanField(default=False)),
                ("finalized", models.BooleanField(default=False)),
                ("finalized_at", models.DateTimeField(blank=True, null=True)),
                (
                    "lead",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workings",
                        to="magic.Practitioner",
                    ),
                ),
                (
                    "gm_strength",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=0,
                        help_text="The base 'strength' of this magic, when it's a GM'd working.",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="WorkingParticipant",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("accepted", models.BooleanField(default=False)),
                (
                    "drained",
                    models.ManyToManyField(
                        related_name="_workingparticipant_drained_+",
                        to="objects.ObjectDB",
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="magic.Practitioner",
                    ),
                ),
                (
                    "tool",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="magic.Attunement",
                    ),
                ),
                (
                    "working",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participant_records",
                        to="magic.Working",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="working",
            name="practitioners",
            field=models.ManyToManyField(
                related_name="assisted_workings",
                through="magic.WorkingParticipant",
                to="magic.Practitioner",
            ),
        ),
        migrations.AddField(
            model_name="working",
            name="spell",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="magic.Spell",
            ),
        ),
        migrations.AddField(
            model_name="spell",
            name="effects",
            field=models.ManyToManyField(
                related_name="_spell_effects_+",
                through="magic.SpellEffect",
                to="magic.Effect",
            ),
        ),
        migrations.AddField(
            model_name="spell",
            name="node",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="spells",
                to="magic.SkillNode",
            ),
        ),
        migrations.AddField(
            model_name="skillnode",
            name="related_effects",
            field=models.ManyToManyField(
                related_name="nodes", through="magic.SkillNodeEffect", to="magic.Effect"
            ),
        ),
        migrations.CreateModel(
            name="PractitionerSpell",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "learned_by",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Staff Fiat"), (1, "Teaching"), (2, "Discovery")],
                        default=0,
                    ),
                ),
                ("learned_on", models.DateField()),
                (
                    "learned_notes",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spell_discoveries",
                        to="magic.Practitioner",
                    ),
                ),
                (
                    "spell",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="known_by",
                        to="magic.Spell",
                    ),
                ),
                (
                    "success_msg",
                    models.TextField(
                        blank=True,
                        help_text="Custom message for our version of the spell",
                    ),
                ),
            ],
            options={
                "unique_together": {("practitioner", "spell")},
            },
        ),
        migrations.AddField(
            model_name="practitioner",
            name="effects",
            field=models.ManyToManyField(
                through="magic.PractitionerEffect", to="magic.Effect"
            ),
        ),
        migrations.AddField(
            model_name="practitioner",
            name="nodes",
            field=models.ManyToManyField(
                through="magic.SkillNodeResonance", to="magic.SkillNode"
            ),
        ),
        migrations.AddField(
            model_name="practitioner",
            name="raw_affinity",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="magic.Affinity",
            ),
        ),
        migrations.AddField(
            model_name="practitioner",
            name="raw_alignment",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="magic.Alignment",
            ),
        ),
        migrations.AddField(
            model_name="practitioner",
            name="spells",
            field=models.ManyToManyField(
                through="magic.PractitionerSpell", to="magic.Spell"
            ),
        ),
        migrations.AddField(
            model_name="attunement",
            name="practitioner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="attunements",
                to="magic.Practitioner",
            ),
        ),
        migrations.CreateModel(
            name="PractitionerFavor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.PositiveIntegerField(default=0)),
                ("gm_notes", models.TextField(blank=True, null=True)),
                (
                    "alignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favored",
                        to="magic.Alignment",
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favored_by",
                        to="magic.Practitioner",
                    ),
                ),
            ],
            options={
                "unique_together": {("practitioner", "alignment")},
            },
        ),
        migrations.CreateModel(
            name="PractitionerAlignment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.PositiveIntegerField(default=0)),
                (
                    "alignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="magic.Alignment",
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alignments",
                        to="magic.Practitioner",
                    ),
                ),
            ],
            options={
                "unique_together": {("practitioner", "alignment")},
            },
        ),
        migrations.CreateModel(
            name="Condition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=40)),
                ("description", models.TextField(blank=True, null=True)),
                ("auto_discover", models.BooleanField(default=False)),
                (
                    "required_resonance",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="If auto_discover is set, the Condition will automatically be gained when you have this much resonance in the associated node.",
                        null=True,
                    ),
                ),
                (
                    "roll_stat",
                    models.CharField(
                        default="Will",
                        help_text="The stat to roll to avoid this condition.",
                        max_length=20,
                    ),
                ),
                (
                    "roll_skill",
                    models.CharField(
                        default="Occult",
                        help_text="The skill to roll to avoid this condition.",
                        max_length=25,
                    ),
                ),
                (
                    "roll_base_difficulty",
                    models.PositiveSmallIntegerField(
                        default=30,
                        help_text="The base difficulty, which will be modified by effect strength and resonance of the attached node.",
                    ),
                ),
                (
                    "positive_condition",
                    models.BooleanField(
                        default=False,
                        help_text="If true, then succeeding the roll triggers this Condition; if false, failing does.",
                    ),
                ),
                ("emit_room", models.TextField(blank=True, null=True)),
                ("emit_self", models.TextField(blank=True, null=True)),
                (
                    "affinity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="magic.Affinity",
                    ),
                ),
                (
                    "alignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="magic.Alignment",
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conditions",
                        to="magic.SkillNode",
                    ),
                ),
                (
                    "effects",
                    models.ManyToManyField(
                        related_name="_condition_effects_+", to="magic.Effect"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerCondition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gm_notes", models.TextField(blank=True, null=True)),
                (
                    "condition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="afflicted",
                        to="magic.Condition",
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conditions",
                        to="magic.Practitioner",
                    ),
                ),
            ],
            options={
                "unique_together": {("practitioner", "condition")},
            },
        ),
        migrations.CreateModel(
            name="AlchemicalMaterial",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=40)),
                (
                    "affinity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="materials",
                        to="magic.Affinity",
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("plural_name", models.CharField(blank=True, max_length=40, null=True)),
                (
                    "alignment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="magic.Alignment",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="working",
            name="weave_affinity",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="magic.Affinity",
            ),
        ),
        migrations.AddField(
            model_name="working",
            name="weave_alignment",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="magic.Alignment",
            ),
        ),
        migrations.AddField(
            model_name="working",
            name="weave_effect",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="magic.Effect",
            ),
        ),
        migrations.AlterField(
            model_name="workingparticipant",
            name="tool",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="magic.Attunement",
            ),
        ),
    ]
