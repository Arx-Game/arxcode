# Generated by Django 2.2.16 on 2020-12-27 17:10

from django.db import migrations, models
import django.db.models.deletion


def add_healing_checks(apps, schema_editor):
    """
    Add checks for healing other characters, and the recovery/revive rolls made by the
    characters who are healed.
    """
    # get needed models
    CheckCondition = apps.get_model("stat_checks", "CheckCondition")
    TraitsInCombination = apps.get_model("stat_checks", "TraitsInCombination")
    StatCombination = apps.get_model("stat_checks", "StatCombination")
    StatCheck = apps.get_model("stat_checks", "StatCheck")
    Trait = apps.get_model("traits", "Trait")
    StatCheckOutcome = apps.get_model("stat_checks", "StatCheckOutcome")
    RollResult = apps.get_model("stat_checks", "RollResult")
    CheckDifficultyRule = apps.get_model("stat_checks", "CheckDifficultyRule")
    DifficultyRating = apps.get_model("stat_checks", "DifficultyRating")

    # get difficulties
    easy = DifficultyRating.objects.get(name="easy")
    normal = DifficultyRating.objects.get(name="normal")
    hard = DifficultyRating.objects.get(name="hard")
    daunting = DifficultyRating.objects.get(name="daunting")

    # get needed traits
    stamina = Trait.objects.get(name="stamina")
    intellect = Trait.objects.get(name="intellect")
    medicine = Trait.objects.get(name="medicine")

    # get roll results
    catastrophic = RollResult.objects.get(name="catastrophically fails")
    fail = RollResult.objects.get(name="fails")
    marginal_fail = RollResult.objects.get(name="marginally fails")
    marginal_success = RollResult.objects.get(name="marginally successful")
    success = RollResult.objects.get(name="successful")
    spectacular = RollResult.objects.get(name="spectacularly successful")
    inhuman = RollResult.objects.get(name="inhumanly successful")

    # Recovery Check is sta * 3 at normal for the check itself
    recovery_system = StatCombination.objects.create()
    recovery_check = StatCheck.objects.create(
        name="recovery check",
        dice_system=recovery_system,
        description="Roll made by characters recovering from damage periodically. "
        "Modified by the highest recovery treatment check they've received.",
    )
    TraitsInCombination.objects.create(
        trait=stamina, stat_combination=recovery_system, value_multiplier=3
    )
    # all rolls for recovery check are at normal
    CheckDifficultyRule.objects.create(
        stat_check=recovery_check,
        difficulty=normal,
        description="Attempts to recover are always at normal difficulty.",
    )
    # botch is no healing
    StatCheckOutcome.objects.create(
        stat_check=recovery_check,
        result=catastrophic,
        description="The character's recovery does not progress at all.",
    )
    # fail/marginal fail is heal sta*3 (plus recovery assists)
    sta_3 = StatCombination.objects.create()
    sta_3.trait_combination_values.create(trait=stamina, value_multiplier=3)
    StatCheckOutcome.objects.create(
        stat_check=recovery_check,
        result=fail,
        description="The character recovers a small amount.",
        effect=5,
        stat_combination=sta_3,
    )
    # success is sta*3 + 10
    sta_3_plus_10 = StatCombination.objects.create(flat_value=10)
    sta_3_plus_10.trait_combination_values.create(trait=stamina, value_multiplier=3)
    StatCheckOutcome.objects.create(
        stat_check=recovery_check,
        result=marginal_success,
        description="The character recovers a fair amount.",
        effect=5,
        stat_combination=sta_3_plus_10,
    )
    # crit is sta*3 + 30
    sta_3_plus_30 = StatCombination.objects.create(flat_value=30)
    sta_3_plus_30.trait_combination_values.create(trait=stamina, value_multiplier=3)
    StatCheckOutcome.objects.create(
        stat_check=recovery_check,
        result=spectacular,
        description="The character's recovery progresses well.",
        effect=5,
        stat_combination=sta_3_plus_30,
    )

    # both recovery/revive treatments use same dice system, but have different outcomes and difficulties
    treatment_system = StatCombination.objects.create()
    # Recovery Treatment
    recovery_treatment = StatCheck.objects.create(
        name="recovery treatment",
        dice_system=treatment_system,
        description="Providing medical care to a character to help them with their recovery tests.",
    )
    revive_treatment = StatCheck.objects.create(
        name="revive treatment",
        dice_system=treatment_system,
        description="Providing medical care to an unconscious character to help them wake up.",
    )
    # int + medicine traits used in the system for treatment
    treatment_system.trait_combination_values.create(trait=intellect)
    treatment_system.trait_combination_values.create(trait=medicine)
    # difficulties for recovery treatment
    # rule for easy: 0-20% missing health
    up_to_twenty, _ = CheckCondition.objects.get_or_create(value=1)
    recovery_treatment.difficulty_rules.create(
        difficulty=easy,
        situation=up_to_twenty,
        description="The target is likely to be healed.",
    )
    # rule for normal: 21-49% missing health
    up_to_half, _ = CheckCondition.objects.get_or_create(value=21)
    recovery_treatment.difficulty_rules.create(
        difficulty=normal,
        situation=up_to_half,
        description="The target has a fair chance of being healed.",
    )
    # rule for hard: 50%+
    more_than_half, _ = CheckCondition.objects.get_or_create(value=51)
    recovery_treatment.difficulty_rules.create(
        difficulty=hard,
        situation=more_than_half,
        description="The target is difficult to treat and may not recover.",
    )
    # outcomes for recovery treatment
    # marginal: medicine * 2 value
    HEALING = 5
    WOUND_CURE = 6
    StatCheckOutcome.objects.create(
        stat_check=recovery_treatment,
        result=marginal_fail,
        description="No healing on a failure.",
    )
    med_two = StatCombination.objects.create()
    med_two.trait_combination_values.create(trait=medicine, value_multiplier=2)
    StatCheckOutcome.objects.create(
        stat_check=recovery_treatment,
        result=marginal_success,
        effect=HEALING,
        stat_combination=med_two,
        description="On a marginal success, the target heals slightly.",
    )
    # success: medicine * 5
    med_five = StatCombination.objects.create()
    med_five.trait_combination_values.create(trait=medicine, value_multiplier=5)
    StatCheckOutcome.objects.create(
        stat_check=recovery_treatment,
        result=success,
        effect=HEALING,
        stat_combination=med_five,
        description="On a success, the target heals.",
    )
    # specacular: medicine * 10, plus heal a wound
    med_ten = StatCombination.objects.create()
    med_ten.trait_combination_values.create(trait=medicine, value_multiplier=10)
    StatCheckOutcome.objects.create(
        stat_check=recovery_treatment,
        result=spectacular,
        effect=WOUND_CURE,
        stat_combination=med_ten,
        description="On a spectacular success, the target heals and can "
        "heal a serious wound.",
    )
    # inhuman: medicine * 20, plus heal a wound
    med_twenty = StatCombination.objects.create()
    med_twenty.trait_combination_values.create(trait=medicine, value_multiplier=20)
    StatCheckOutcome.objects.create(
        stat_check=recovery_treatment,
        result=inhuman,
        effect=WOUND_CURE,
        stat_combination=med_twenty,
        description="On an inhuman success, the target heals a great deal and can "
        "heal a serious wound.",
    )

    # difficulties for revive treatment
    # revive treatment copies CheckDifficultyRules from uncon save
    death_save = StatCheck.objects.get(name="death save")
    descs = {
        easy: "The target is likely to wake up.",
        normal: "The target has a decent chance of waking up.",
        hard: "The target is unlikely to wake up.",
        daunting: "The target has a poor chance of waking up.",
    }
    # copy death save's difficulties/situations/check conditions
    for rule in death_save.difficulty_rules.all():
        revive_treatment.difficulty_rules.create(
            difficulty=rule.difficulty,
            situation=rule.situation,
            description=descs[rule.difficulty],
        )
    # outcomes for revive treatment. healing system is med_two plus different effects
    REGAIN_UNCON_HEALTH = 7
    REVIVE = 8
    StatCheckOutcome.objects.create(
        stat_check=revive_treatment,
        result=marginal_fail,
        description="No healing on a failure.",
    )
    StatCheckOutcome.objects.create(
        stat_check=revive_treatment,
        result=marginal_success,
        effect=REGAIN_UNCON_HEALTH,
        stat_combination=med_two,
        description="The target heals and has a chance to regain consciousness "
        "if no longer in negative health.",
    )
    StatCheckOutcome.objects.create(
        stat_check=revive_treatment,
        result=spectacular,
        effect=REVIVE,
        stat_combination=med_two,
        description="The target regains consciousness.",
    )


class Migration(migrations.Migration):
    dependencies = [
        ("stat_checks", "0002_auto_20201025_1127"),
    ]

    operations = [
        migrations.AddField(
            model_name="statcheckoutcome",
            name="stat_combination",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="stat_check_outcomes",
                to="stat_checks.StatCombination",
                help_text="If defined, this stat combination is used to calculate a value for the effect.",
                blank=True,
            ),
        ),
        migrations.AddField(
            model_name="statcombination",
            name="flat_value",
            field=models.SmallIntegerField(
                help_text="If defined, this value is also used.", null=True, blank=True
            ),
        ),
        migrations.AddField(
            model_name="statcombination",
            name="random_ceiling",
            field=models.SmallIntegerField(
                help_text="If defined, value is random between flat value and this ceiling.",
                null=True,
                blank=True,
            ),
        ),
        migrations.RunPython(
            add_healing_checks, migrations.RunPython.noop, elidable=False
        ),
    ]
