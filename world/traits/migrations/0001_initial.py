# Generated by Django 2.2.16 on 2020-11-08 15:00

from django.db import migrations, models
import django.db.models.deletion


PHYSICAL_STATS = ("strength", "dexterity", "stamina")
SOCIAL_STATS = ("charm", "command", "composure")
MENTAL_STATS = ("intellect", "perception", "wits")
MAGIC_STATS = ("mana", "luck", "willpower")
COMBAT_SKILLS = (
    "athletics",
    "brawl",
    "dodge",
    "archery",
    "small wpn",
    "medium wpn",
    "huge wpn",
    "stealth",
    "survival",
)
SOCIAL_SKILLS = (
    "intimidation",
    "leadership",
    "manipulation",
    "seduction",
    "diplomacy",
    "propaganda",
    "empathy",
    "etiquette",
    "performance",
    "haggling",
    "streetwise",
)
GENERAL_SKILLS = (
    "riddles",
    "legerdemain",
    "ride",
    "investigation",
    "law",
    "linguistics",
    "medicine",
    "occult",
    "stewardship",
    "theology",
    "agriculture",
    "economics",
    "teaching",
    "war",
    "animal ken",
    "artwork",
    "sailing",
)
CRAFTING_SKILLS = ("sewing", "smithing", "tanning", "alchemy", "woodworking")
CRAFTING_ABILITIES = (
    "tailor",
    "weaponsmith",
    "armorsmith",
    "leatherworker",
    "apothecary",
    "carpenter",
    "jeweler",
)


def create_traits(apps, schema_editor):
    """
    Populates our traits based on the constants that had been defined
    in the stats_and_skills rules file. Hereafter they'll exist as
    tables that can be adjusted by staff without having to bother me.
    """
    # constants that will be class variables in Trait
    PHYSICAL = "physical"
    SOCIAL = "social"
    MENTAL = "mental"
    MAGIC = "magic"
    COMBAT = "combat"
    GENERAL = "general"
    CRAFTING = "crafting"

    STAT, SKILL, ABILITY, OTHER = range(4)
    # get the Trait model
    Trait = apps.get_model("traits", "Trait")
    traits_list = []
    for name in PHYSICAL_STATS:
        traits_list.append(Trait(name=name, trait_type=STAT, category=PHYSICAL))
    for name in SOCIAL_STATS:
        traits_list.append(Trait(name=name, trait_type=STAT, category=SOCIAL))
    for name in MENTAL_STATS:
        traits_list.append(Trait(name=name, trait_type=STAT, category=MENTAL))
    for name in MAGIC_STATS:
        traits_list.append(Trait(name=name, trait_type=STAT, category=MAGIC))
    for name in SOCIAL_SKILLS:
        traits_list.append(Trait(name=name, trait_type=SKILL, category=SOCIAL))
    for name in COMBAT_SKILLS:
        traits_list.append(Trait(name=name, trait_type=SKILL, category=COMBAT))
    for name in GENERAL_SKILLS:
        traits_list.append(Trait(name=name, trait_type=SKILL, category=GENERAL))
    for name in CRAFTING_SKILLS:
        traits_list.append(Trait(name=name, trait_type=SKILL, category=CRAFTING))
    for name in CRAFTING_ABILITIES:
        traits_list.append(Trait(name=name, trait_type=ABILITY, category=CRAFTING))
    Trait.objects.bulk_create(traits_list)


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Trait",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
                (
                    "trait_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "stat"),
                            (1, "skill"),
                            (2, "ability"),
                            (3, "other"),
                        ],
                        default=3,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        help_text="A category for this type of trait, like 'physical' stats, etc",
                        max_length=80,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CharacterTraitValue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.SmallIntegerField(default=0)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trait_values",
                        to="objects.ObjectDB",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="traits.Trait"
                    ),
                ),
            ],
            options={
                "unique_together": {("character", "trait")},
            },
        ),
        migrations.RunPython(create_traits, migrations.RunPython.noop),
    ]
