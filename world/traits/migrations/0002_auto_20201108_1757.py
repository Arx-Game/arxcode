# Generated by Django 2.2.16 on 2020-11-08 17:57

from django.db import migrations


STATS = (
    "strength",
    "dexterity",
    "stamina",
    "charm",
    "command",
    "composure",
    "intellect",
    "perception",
    "wits",
    "mana",
    "luck",
    "willpower",
)


def add_retainer_abilities(apps, schema_editor):
    """Adds a few abilities specific to retainers"""
    ABILITY = 2
    Trait = apps.get_model("traits", "Trait")
    for name in (
        "investigation_assistant",
        "discreet_messenger",
        "custom_messenger",
        "abyssal magic",
        "primal magic",
        "demonic magic",
        "blood magic",
    ):
        Trait.objects.create(name=name, trait_type=ABILITY, category="other")


def convert_attribute_stats_to_traits(apps, schema_editor):
    """
    This converts stats/skills/abilities that were stored in Attributes to
    the new traits system.
    """
    Attribute = apps.get_model("typeclasses", "Attribute")
    Trait = apps.get_model("traits", "Trait")
    CharacterTraitValue = apps.get_model("traits", "CharacterTraitValue")
    qs = Attribute.objects.filter(db_key__in=STATS + ("skills", "abilities"))
    traits = {ob.name.lower(): ob for ob in Trait.objects.all()}
    # store objects as a dict of the tuple of unique pairs to the new trait value
    # reason for this is because of constraint violations - an obj could have the same attribute, db_key was not unique
    bulk_list = {}
    for ob in qs:
        try:
            objdb = ob.objectdb_set.all()[0]
            if ob.db_key in ("skills", "abilities"):
                for key, value in ob.db_value.items():
                    # skip some invalid values that are in there somehow
                    if key in ("mass org", "gossip", "crushing melee"):
                        continue
                    # correct a typo or two
                    if key == "riding":
                        key = "ride"
                    if key == "tailoring":
                        key = "tailor"
                    try:
                        trait = traits[key.lower()]
                    except KeyError:
                        print(f"Attribute {ob.id} contained invalid name: {key}")
                        continue
                    bulk_list[(objdb, trait)] = CharacterTraitValue(
                        character=objdb, trait=trait, value=int(value)
                    )

            else:
                trait = traits[ob.db_key]
                bulk_list[(objdb, trait)] = CharacterTraitValue(
                    character=objdb, trait=trait, value=int(ob.db_value)
                )
            ob.delete()
        except (AttributeError, ValueError, TypeError, IndexError, KeyError) as err:
            print(f"Failed to convert {ob.id}: {err}")
            continue

    # create all the values as a bulk operation
    CharacterTraitValue.objects.bulk_create(bulk_list.values())


class Migration(migrations.Migration):

    dependencies = [
        ("traits", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(add_retainer_abilities, migrations.RunPython.noop),
        migrations.RunPython(
            convert_attribute_stats_to_traits, migrations.RunPython.noop
        ),
    ]
