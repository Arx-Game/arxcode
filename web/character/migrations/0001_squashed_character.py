# Generated by Django 2.2.16 on 2020-11-21 18:24

import cloudinary.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("objects", "0005_auto_20150403_2339"),
        ("objects", "0009_remove_objectdb_db_player"),
    ]

    operations = [
        migrations.CreateModel(
            name="PlayerAccount",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("karma", models.PositiveSmallIntegerField(blank=0, default=0)),
                ("gm_notes", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="AccountHistory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("xp_earned", models.SmallIntegerField(blank=0, default=0)),
                ("gm_notes", models.TextField(blank=True, null=True)),
                (
                    "start_date",
                    models.DateTimeField(blank=True, null=True, db_index=True),
                ),
                (
                    "end_date",
                    models.DateTimeField(blank=True, null=True, db_index=True),
                ),
            ],
            options={
                "verbose_name": "Played Character",
                "verbose_name_plural": "Played Characters",
            },
        ),
        migrations.CreateModel(
            name="Chapter",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                ("synopsis", models.TextField(blank=True, null=True)),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Clue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, db_index=True)),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        blank=0,
                        db_index=True,
                        default=0,
                        help_text="Value required to get this clue",
                    ),
                ),
                (
                    "desc",
                    models.TextField(
                        blank=True,
                        help_text="Description of the clue given to the player",
                        verbose_name="Description",
                    ),
                ),
                (
                    "red_herring",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this revelation is totally fake",
                    ),
                ),
                (
                    "allow_investigation",
                    models.BooleanField(
                        default=False,
                        help_text="Can be gained through investigation rolls",
                    ),
                ),
                (
                    "allow_exploration",
                    models.BooleanField(
                        default=False,
                        help_text="Can be gained through exploration rolls",
                    ),
                ),
                (
                    "allow_trauma",
                    models.BooleanField(
                        default=False, help_text="Can be gained through combat rolls"
                    ),
                ),
                (
                    "clue_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Game Lore"),
                            (1, "Vision"),
                            (2, "Character Secret"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "gm_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes visible only to staff/GMs about this clue",
                        verbose_name="GM Notes",
                    ),
                ),
                (
                    "allow_sharing",
                    models.BooleanField(default=True, help_text="Can be shared"),
                ),
                (
                    "tangible_object",
                    models.ForeignKey(
                        blank=True,
                        help_text="An in-game object that this Clue is a secret or backstory for",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="clues",
                        to="objects.ObjectDB",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Episode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                ("synopsis", models.TextField(blank=True, null=True)),
                ("gm_notes", models.TextField(blank=True, null=True)),
                ("date", models.DateTimeField(blank=True, db_index=True, null=True)),
                (
                    "chapter",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="episodes",
                        to="character.Chapter",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Investigation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ongoing",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this investigation is finished or not",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this is the investigation for the week. Only one allowed",
                    ),
                ),
                (
                    "automate_result",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to generate a result during weekly maintenance. Set false if GM'd",
                    ),
                ),
                (
                    "results",
                    models.TextField(
                        blank=True,
                        default="You didn't find anything.",
                        help_text="The text to send the player, either set by GM or generated automatically by script if automate_result is set.",
                    ),
                ),
                (
                    "actions",
                    models.TextField(
                        blank=True,
                        help_text="The writeup the player submits of their actions, used for GMing.",
                    ),
                ),
                (
                    "topic",
                    models.CharField(
                        blank=True,
                        help_text="Keywords or tldr or title",
                        max_length=255,
                    ),
                ),
                (
                    "stat_used",
                    models.CharField(
                        blank=True,
                        default="perception",
                        help_text="The stat the player chose to use",
                        max_length=80,
                    ),
                ),
                (
                    "skill_used",
                    models.CharField(
                        blank=True,
                        default="investigation",
                        help_text="The skill the player chose to use",
                        max_length=80,
                    ),
                ),
                (
                    "silver",
                    models.PositiveSmallIntegerField(
                        blank=0,
                        default=0,
                        help_text="Additional silver added by the player",
                    ),
                ),
                (
                    "economic",
                    models.PositiveSmallIntegerField(
                        blank=0,
                        default=0,
                        help_text="Additional economic resources added by the player",
                    ),
                ),
                (
                    "military",
                    models.PositiveSmallIntegerField(
                        blank=0,
                        default=0,
                        help_text="Additional military resources added by the player",
                    ),
                ),
                (
                    "social",
                    models.PositiveSmallIntegerField(
                        blank=0,
                        default=0,
                        help_text="Additional social resources added by the player",
                    ),
                ),
                (
                    "progress",
                    models.IntegerField(
                        default=0, help_text="Progress made towards a discovery."
                    ),
                ),
                (
                    "completion_value",
                    models.IntegerField(
                        default=300,
                        help_text="Total progress needed to make a discovery.",
                    ),
                ),
                (
                    "roll",
                    models.SmallIntegerField(
                        blank=True, default=-9999, help_text="Current dice roll"
                    ),
                ),
                (
                    "action_points",
                    models.PositiveSmallIntegerField(
                        blank=0,
                        default=0,
                        help_text="How many action points spent by player/assistants.",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Milestone",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("synopsis", models.TextField(blank=True, null=True)),
                ("secret", models.BooleanField(default=False)),
                ("gm_notes", models.TextField(blank=True, null=True)),
                ("importance", models.PositiveSmallIntegerField(blank=0, default=0)),
                (
                    "chapter",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="milestones",
                        to="character.Chapter",
                    ),
                ),
                (
                    "episode",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="milestones",
                        to="character.Episode",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Mystery",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=255)),
                (
                    "desc",
                    models.TextField(
                        blank=True,
                        help_text="A summary of the lore of revelations for this category",
                        verbose_name="Description",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        help_text="Type of mystery this is - ability-related, metaplot, etc",
                        max_length=80,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Mysteries",
            },
        ),
        migrations.CreateModel(
            name="Photo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("create_time", models.DateTimeField(auto_now_add=True)),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        verbose_name="Name or description of the picture (optional)",
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        verbose_name="Optional 'alt' text when mousing over your image",
                    ),
                ),
                (
                    "image",
                    cloudinary.models.CloudinaryField(
                        max_length=255, verbose_name="image"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="a Character owner of this image, if any.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="objects.ObjectDB",
                        verbose_name="owner",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Revelation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, db_index=True)),
                (
                    "desc",
                    models.TextField(
                        blank=True,
                        help_text="Description of the revelation given to the player",
                        verbose_name="Description",
                    ),
                ),
                (
                    "required_clue_value",
                    models.PositiveSmallIntegerField(
                        blank=0,
                        default=0,
                        help_text="The total value of clues to trigger this",
                    ),
                ),
                (
                    "red_herring",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this revelation is totally fake",
                    ),
                ),
                (
                    "gm_notes",
                    models.TextField(
                        blank=True, help_text="OOC Notes about this topic"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Roster",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                (
                    "lock_storage",
                    models.TextField(
                        blank=True,
                        help_text="defined in setup_utils",
                        verbose_name="locks",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RosterEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gm_notes", models.TextField(blank=True)),
                ("inactive", models.BooleanField(default=False)),
                ("frozen", models.BooleanField(default=False)),
                ("sheet_style", models.TextField(blank=True)),
                (
                    "lock_storage",
                    models.TextField(
                        blank=True,
                        help_text="defined in setup_utils",
                        verbose_name="locks",
                    ),
                ),
                (
                    "character",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roster",
                        to="objects.ObjectDB",
                    ),
                ),
                (
                    "current_account",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="characters",
                        to="character.PlayerAccount",
                    ),
                ),
                (
                    "player",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roster",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "previous_accounts",
                    models.ManyToManyField(
                        blank=True,
                        through="character.AccountHistory",
                        to="character.PlayerAccount",
                    ),
                ),
                (
                    "profile_picture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="character.Photo",
                    ),
                ),
                (
                    "roster",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="entries",
                        to="character.Roster",
                    ),
                ),
                ("action_points", models.SmallIntegerField(blank=100, default=100)),
                ("show_positions", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name_plural": "Roster Entries",
                "unique_together": {("player", "character")},
            },
        ),
        migrations.CreateModel(
            name="Story",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                ("synopsis", models.TextField(blank=True, null=True)),
                ("season", models.PositiveSmallIntegerField(blank=0, default=0)),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "current_chapter",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="current_chapter_story",
                        to="character.Chapter",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Stories",
            },
        ),
        migrations.CreateModel(
            name="RevelationDiscovery",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True,
                        help_text="Message for the player's records about how they discovered this.",
                    ),
                ),
                ("date", models.DateTimeField(blank=True, null=True)),
                (
                    "discovery_method",
                    models.CharField(
                        help_text="How this was discovered - exploration, trauma, etc",
                        max_length=255,
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="revelation_discoveries",
                        to="character.RosterEntry",
                    ),
                ),
                (
                    "investigation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="revelations",
                        to="character.Investigation",
                    ),
                ),
                (
                    "milestone",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="revelation",
                        to="character.Milestone",
                    ),
                ),
                (
                    "revealed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="revelations_spoiled",
                        to="character.RosterEntry",
                    ),
                ),
                (
                    "revelation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discoveries",
                        to="character.Revelation",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Revelation Discoveries",
                "unique_together": {("character", "revelation")},
            },
        ),
        migrations.AddField(
            model_name="revelation",
            name="characters",
            field=models.ManyToManyField(
                blank=True,
                db_index=True,
                related_name="revelations",
                through="character.RevelationDiscovery",
                to="character.RosterEntry",
            ),
        ),
        migrations.CreateModel(
            name="Participant",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("xp_earned", models.PositiveSmallIntegerField(blank=0, default=0)),
                ("karma_earned", models.PositiveSmallIntegerField(blank=0, default=0)),
                ("gm_notes", models.TextField(blank=True, null=True)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="character.RosterEntry",
                    ),
                ),
                (
                    "milestone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="character.Milestone",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="milestone",
            name="image",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="milestones",
                to="character.Photo",
            ),
        ),
        migrations.AddField(
            model_name="milestone",
            name="participants",
            field=models.ManyToManyField(
                blank=True, through="character.Participant", to="character.RosterEntry"
            ),
        ),
        migrations.AddField(
            model_name="milestone",
            name="protagonist",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="milestones",
                to="character.RosterEntry",
            ),
        ),
        migrations.AddField(
            model_name="investigation",
            name="character",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="investigations",
                to="character.RosterEntry",
            ),
        ),
        migrations.AddField(
            model_name="investigation",
            name="clue_target",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="character.Clue",
            ),
        ),
        migrations.CreateModel(
            name="ClueForRevelation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "required_for_revelation",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this must be discovered for the revelation to finish",
                    ),
                ),
                (
                    "tier",
                    models.PositiveSmallIntegerField(
                        blank=0,
                        default=0,
                        help_text="How high in the hierarchy of discoveries this clue is, lower number discovered first",
                    ),
                ),
                (
                    "clue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage",
                        to="character.Clue",
                    ),
                ),
                (
                    "revelation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="clues_used",
                        to="character.Revelation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ClueDiscovery",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True,
                        help_text="Message for the player's records about how they discovered this.",
                    ),
                ),
                ("date", models.DateTimeField(blank=True, null=True)),
                (
                    "discovery_method",
                    models.CharField(
                        blank=True,
                        help_text="How this was discovered - exploration, trauma, etc",
                        max_length=255,
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="clue_discoveries",
                        to="character.RosterEntry",
                    ),
                ),
                (
                    "clue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discoveries",
                        to="character.Clue",
                    ),
                ),
                (
                    "investigation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="clue_discoveries",
                        to="character.Investigation",
                    ),
                ),
                (
                    "milestone",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="clue",
                        to="character.Milestone",
                    ),
                ),
                (
                    "revealed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="clues_spoiled",
                        to="character.RosterEntry",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Clue Discoveries",
            },
        ),
        migrations.AddField(
            model_name="clue",
            name="characters",
            field=models.ManyToManyField(
                blank=True,
                db_index=True,
                related_name="clues",
                through="character.ClueDiscovery",
                to="character.RosterEntry",
            ),
        ),
        migrations.AddField(
            model_name="clue",
            name="revelations",
            field=models.ManyToManyField(
                blank=True,
                related_name="clues",
                through="character.ClueForRevelation",
                to="character.Revelation",
            ),
        ),
        migrations.AddField(
            model_name="chapter",
            name="story",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="previous_chapters",
                to="character.Story",
            ),
        ),
        migrations.AddField(
            model_name="accounthistory",
            name="account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="character.PlayerAccount",
            ),
        ),
        migrations.AddField(
            model_name="accounthistory",
            name="entry",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="character.RosterEntry"
            ),
        ),
        migrations.CreateModel(
            name="Theory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("topic", models.CharField(blank=True, max_length=255, null=True)),
                ("desc", models.TextField(blank=True, null=True)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_theories",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_clues",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="theories",
                        to="character.Clue",
                    ),
                ),
                (
                    "related_theories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_theory_related_theories_+",
                        to="character.Theory",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Theories",
            },
        ),
        migrations.CreateModel(
            name="FirstContact",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("summary", models.TextField(blank=True)),
                ("private", models.BooleanField(default=False)),
                (
                    "from_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="initiated_contacts",
                        to="character.AccountHistory",
                    ),
                ),
                (
                    "to_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_contacts",
                        to="character.AccountHistory",
                    ),
                ),
                ("receiver_share", models.BooleanField(default=False)),
                ("writer_share", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
                "verbose_name_plural": "First Impressions",
            },
        ),
        migrations.CreateModel(
            name="SearchTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "game_objects",
                    models.ManyToManyField(
                        blank=True, related_name="search_tags", to="objects.ObjectDB"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TheoryPermissions",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("can_edit", models.BooleanField(default=False)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="theory_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "theory",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="theory_permissions",
                        to="character.Theory",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="accounthistory",
            name="contacts",
            field=models.ManyToManyField(
                blank=True,
                related_name="contacted_by",
                through="character.FirstContact",
                to="character.AccountHistory",
            ),
        ),
        migrations.AddField(
            model_name="clue",
            name="search_tags",
            field=models.ManyToManyField(
                blank=True,
                db_index=True,
                related_name="clues",
                to="character.SearchTag",
            ),
        ),
        migrations.CreateModel(
            name="Flashback",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=250, unique=True)),
                ("summary", models.TextField(blank=True)),
                ("db_date_created", models.DateTimeField(blank=True, null=True)),
                ("concluded", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PlayerInfoEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entry_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Info"),
                            (1, "Ruling"),
                            (2, "Praise"),
                            (3, "Criticism"),
                        ],
                        default=0,
                    ),
                ),
                ("text", models.TextField(blank=True)),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entries",
                        to="character.PlayerAccount",
                    ),
                ),
                ("entry_date", models.DateTimeField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "verbose_name_plural": "Info Entries",
            },
        ),
        migrations.CreateModel(
            name="PlayerSiteEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(blank=True, max_length=255, null=True)),
                ("last_seen", models.DateTimeField(blank=True, null=True)),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to="character.PlayerAccount",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "verbose_name_plural": "Site Entries",
            },
        ),
        migrations.AddField(
            model_name="clue",
            name="author",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="clues_written",
                to="character.RosterEntry",
            ),
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(blank=True, null=True)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("gamedate", models.CharField(blank=True, max_length=80, null=True)),
                (
                    "milestone",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="character.Milestone",
                    ),
                ),
                (
                    "poster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="character.RosterEntry",
                    ),
                ),
                (
                    "reply_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="character.Comment",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments_upon",
                        to="character.RosterEntry",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="revelation",
            name="author",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="revelations_written",
                to="character.RosterEntry",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="cluediscovery",
            unique_together={("clue", "character")},
        ),
        migrations.AddField(
            model_name="revelation",
            name="search_tags",
            field=models.ManyToManyField(
                blank=True, related_name="revelations", to="character.SearchTag"
            ),
        ),
        migrations.AddField(
            model_name="theory",
            name="known_by",
            field=models.ManyToManyField(
                blank=True,
                related_name="known_theories",
                through="character.TheoryPermissions",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="StoryEmit",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(blank=True, null=True)),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "chapter",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="emits",
                        to="character.Chapter",
                    ),
                ),
                (
                    "episode",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="emits",
                        to="character.Episode",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="emits",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "search_tags",
                    models.ManyToManyField(
                        blank=True, related_name="emits", to="character.SearchTag"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="revelation",
            name="mysteries",
            field=models.ManyToManyField(
                blank=True,
                help_text="Categories of revelations with summaries",
                related_name="revelations",
                to="character.Mystery",
            ),
        ),
        migrations.CreateModel(
            name="Goal",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "scope",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Heartbreakingly Modest"),
                            (1, "Modest"),
                            (2, "Reasonable"),
                            (3, "Ambitious"),
                            (4, "Venomously Ambitious"),
                            (5, "Megalomanic"),
                        ],
                        default=2,
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Succeeded"),
                            (1, "Failed"),
                            (2, "Abandoned"),
                            (3, "Dormant"),
                            (4, "Active"),
                        ],
                        default=4,
                    ),
                ),
                (
                    "summary",
                    models.CharField(max_length=80, verbose_name="Summary of the goal"),
                ),
                (
                    "description",
                    models.TextField(verbose_name="Detailed description of the goal"),
                ),
                (
                    "ooc_notes",
                    models.TextField(
                        blank=True,
                        verbose_name="Any OOC notes by the player about the goal",
                    ),
                ),
                (
                    "gm_notes",
                    models.TextField(
                        blank=True,
                        verbose_name="Notes by staff, not visible to the player",
                    ),
                ),
                (
                    "entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="goals",
                        to="character.RosterEntry",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlashbackPost",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "actions",
                    models.TextField(
                        blank=True,
                        verbose_name="The body of the post for your character's actions",
                    ),
                ),
                ("db_date_created", models.DateTimeField(blank=True, null=True)),
                (
                    "flashback",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="character.Flashback",
                    ),
                ),
                (
                    "poster",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="flashback_posts",
                        to="character.RosterEntry",
                    ),
                ),
                ("roll", models.CharField(blank=True, max_length=250)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlashbackPostPermission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_read", models.BooleanField(default=False)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flashback_post_permissions",
                        to="character.FlashbackPost",
                    ),
                ),
                (
                    "reader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flashback_post_permissions",
                        to="character.RosterEntry",
                    ),
                ),
            ],
            options={
                "unique_together": {("post", "reader")},
            },
        ),
        migrations.CreateModel(
            name="FlashbackInvolvement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(0, "Retired"), (1, "Contributor"), (2, "Owner")],
                        default=1,
                    ),
                ),
                ("roll", models.CharField(blank=True, max_length=250)),
                (
                    "flashback",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flashback_involvements",
                        to="character.Flashback",
                    ),
                ),
                (
                    "participant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flashback_involvements",
                        to="character.RosterEntry",
                    ),
                ),
            ],
            options={
                "unique_together": {("flashback", "participant")},
            },
        ),
        migrations.AddField(
            model_name="flashback",
            name="participants",
            field=models.ManyToManyField(
                related_name="flashbacks",
                through="character.FlashbackInvolvement",
                to="character.RosterEntry",
            ),
        ),
        migrations.AddField(
            model_name="flashbackpost",
            name="readable_by",
            field=models.ManyToManyField(
                blank=True,
                related_name="readable_flashback_posts",
                through="character.FlashbackPostPermission",
                to="character.RosterEntry",
            ),
        ),
        migrations.CreateModel(
            name="GoalUpdate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("player_summary", models.TextField(blank=True)),
                (
                    "result",
                    models.TextField(
                        blank=True,
                        verbose_name="IC description of the outcome for the player",
                    ),
                ),
                (
                    "gm_notes",
                    models.TextField(
                        blank=True,
                        verbose_name="OOC notes for staff about consequences",
                    ),
                ),
                ("db_date_created", models.DateTimeField(auto_now_add=True)),
                (
                    "goal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updates",
                        to="character.Goal",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InvestigationAssistant",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "currently_helping",
                    models.BooleanField(
                        default=False, help_text="Whether they're currently helping out"
                    ),
                ),
                (
                    "stat_used",
                    models.CharField(
                        blank=True,
                        default="perception",
                        help_text="The stat the player chose to use",
                        max_length=80,
                    ),
                ),
                (
                    "skill_used",
                    models.CharField(
                        blank=True,
                        default="investigation",
                        help_text="The skill the player chose to use",
                        max_length=80,
                    ),
                ),
                (
                    "actions",
                    models.TextField(
                        blank=True,
                        help_text="The writeup the player submits of their actions, used for GMing.",
                    ),
                ),
                (
                    "char",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assisted_investigations",
                        to="objects.ObjectDB",
                    ),
                ),
                (
                    "investigation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assistants",
                        to="character.Investigation",
                    ),
                ),
            ],
            options={
                "unique_together": {("char", "investigation")},
            },
        ),
        migrations.CreateModel(
            name="RPScene",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=80, verbose_name="title of the scene"),
                ),
                (
                    "synopsis",
                    models.TextField(
                        verbose_name="Description of the scene written by player"
                    ),
                ),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("log", models.TextField(verbose_name="Text log of the scene")),
                (
                    "lock_storage",
                    models.TextField(
                        blank=True,
                        help_text="defined in setup_utils",
                        verbose_name="locks",
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="character.RosterEntry",
                    ),
                ),
                (
                    "milestone",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="log",
                        to="character.Milestone",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "RP Scenes",
            },
        ),
        migrations.CreateModel(
            name="PlayerPosition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "players",
                    models.ManyToManyField(
                        related_name="player_positions", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
