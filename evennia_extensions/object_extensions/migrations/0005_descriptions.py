# Generated by Django 2.2.28 on 2023-07-03 15:38

from django.db import migrations, models
import django.db.models.deletion

from server.utils.progress_bar import ProgressBar


def convert_descs(apps, schema_editor):
    Attribute = apps.get_model("typeclasses", "Attribute")
    Descriptions = apps.get_model("object_extensions", "Descriptions")
    qs = Attribute.objects.filter(db_key="raw_desc")
    descriptions_dict = {}
    num = 0
    total = len(qs)
    if total:
        print(f"\nConverting raw_desc: {total} records.")
    for attr in qs:
        try:
            num += 1
            progress = num / total
            print(ProgressBar(progress, "Progress: "), end="\r", flush=True)
            objdb = attr.objectdb_set.all()[0]
            if not attr.db_value or not isinstance(attr.db_value, str):
                attr.delete()
                continue
            # we set raw_desc value to permanent_description
            descriptions_dict[objdb.pk] = Descriptions.objects.create(
                objectdb=objdb,
                permanent_description=attr.db_value,
                temporary_description="",
            )
            attr.delete()
        except IndexError:
            pass
    qs = Attribute.objects.filter(db_key="general_desc")
    num = 0
    total = len(qs)
    if total:
        print(f"\nConverting general_desc: {total} records.")
    for attr in qs:
        try:
            num += 1
            progress = num / total
            print(ProgressBar(progress, "Progress: "), end="\r", flush=True)
            objdb = attr.objectdb_set.all()[0]
            if not attr.db_value or not isinstance(attr.db_value, str):
                attr.delete()
                continue
            # we set general_desc value to permanent_description - it was the
            # fallback value before
            if objdb.pk in descriptions_dict:
                # only need to save if attr.db_value is different.
                # Also there was a bug with non-rooms where general_desc might
                # contain a stale temporary_description, so we only change rooms
                if (
                    descriptions_dict[objdb.pk].permanent_description != attr.db_value
                    and objdb.db_typeclass_path == "typeclasses.rooms.ArxRoom"
                ):
                    descriptions_dict[objdb.pk].permanent_description = attr.db_value
                    descriptions_dict[objdb.pk].save()
            else:
                descriptions_dict[objdb.pk] = Descriptions.objects.create(
                    objectdb=objdb,
                    permanent_description=attr.db_value,
                    temporary_description="",
                )
            attr.delete()
        except IndexError:
            pass
    qs = Attribute.objects.filter(db_key="desc")
    num = 0
    total = len(qs)
    if total:
        print(f"\nConverting desc: {total} records.")
    # if desc is set, we set it to temporary_description if they already have
    # a permanent_description. Otherwise, it's the permanent_description
    for attr in qs:
        try:
            num += 1
            progress = num / total
            print(ProgressBar(progress, "Progress: "), end="\r", flush=True)
            objdb = attr.objectdb_set.all()[0]
            if not attr.db_value or not isinstance(attr.db_value, str):
                attr.delete()
                continue
            if objdb.pk in descriptions_dict:
                descriptions_dict[objdb.pk].temporary_description = attr.db_value
                descriptions_dict[objdb.pk].save()
            else:
                descriptions_dict[objdb.pk] = Descriptions.objects.create(
                    objectdb=objdb,
                    permanent_description=attr.db_value,
                    temporary_description="",
                )
            attr.delete()
        except IndexError:
            pass
    if total:
        print("\n")


class Migration(migrations.Migration):
    dependencies = [
        ("objects", "0011_auto_20191025_0831"),
        ("object_extensions", "0004_permanence_pre_offgrid_location"),
    ]

    operations = [
        migrations.CreateModel(
            name="Descriptions",
            fields=[
                ("permanent_description", models.TextField(blank=True)),
                ("temporary_description", models.TextField(blank=True)),
                (
                    "objectdb",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="descriptions",
                        serialize=False,
                        to="objects.ObjectDB",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunPython(convert_descs, reverse_code=migrations.RunPython.noop),
    ]
