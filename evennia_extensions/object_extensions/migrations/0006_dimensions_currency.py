# Generated by Django 2.2.28 on 2023-07-23 14:38

from django.db import migrations, models
from decimal import Decimal

from server.utils.progress_bar import ProgressBar


def convert_currency(apps, schema_editor):
    """
    We'll grab all Attributes that have a db_key of currency, convert them
    to Decimal objects for insertion into the new currency field, and then
    delete the Attribute. Any currency Attribute that doesn't convert will
    be skipped and deleted. We'll create a Dimension Attribute if needed,
    but some will already exist. We'll use the ProgressBar utility to track
    progress.
    """
    Attribute = apps.get_model("typeclasses", "Attribute")
    Dimensions = apps.get_model("object_extensions", "Dimensions")
    qs = Attribute.objects.filter(db_key="currency")
    num = 0
    total = len(qs)
    fails = 0
    success = 0
    if total:
        print(f"\nConverting currency: {total} records.")
    for attr in qs:
        try:
            num += 1
            progress = num / total
            print(ProgressBar(progress, "Progress: "), end="\r", flush=True)
            objdb = attr.objectdb_set.all()[0]
            # try to convert the currency value to a Decimal - if it fails,
            # we'll delete the Attribute and move on
            currency = Decimal(attr.db_value)
            # in testing this blew up when the value was in the quintillions, so
            # we will cap it at 100 trillion
            if currency > 100000000000000:
                currency = 100000000000000
            # use update_or_create to set the currency for the Dimensions object
            # if it already exists, or create it if it doesn't
            Dimensions.objects.update_or_create(
                objectdb=objdb,
                defaults={"currency": currency},
            )
            success += 1
            attr.delete()
        except (IndexError, TypeError, ValueError):
            fails += 1
            attr.delete()
    if total:
        print("\n")
        print(f"Success: {success}")
        print(f"Fails: {fails}")


class Migration(migrations.Migration):

    dependencies = [
        ("object_extensions", "0005_descriptions"),
    ]

    operations = [
        migrations.AddField(
            model_name="dimensions",
            name="currency",
            field=models.DecimalField(decimal_places=2, default=0, max_digits=17),
        ),
        migrations.RunPython(
            convert_currency, migrations.RunPython.noop, elidable=True
        ),
    ]
