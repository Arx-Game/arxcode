# Generated by Django 2.2.28 on 2023-07-23 21:20

from django.db import migrations, models
import django.db.models.deletion

from server.utils.progress_bar import ProgressBar


def convert_room_details(apps, schema_editor):
    """
    All room details are stored inside typeclasses.Attributes db_value as a dictionary.
    For each attribute that is a valid dictionary, we'll need to create a RoomDetail
    object that points to the objectdb_set[0] object that represents the room, and do
    a create_or_update on that RoomDetail object with the dictionary values. The
    attribute will need to be deleted after conversion, or if it's not a valid
    RoomDetail.
    """
    Attribute = apps.get_model("typeclasses", "Attribute")
    RoomDetail = apps.get_model("room_extensions", "RoomDetail")
    qs = Attribute.objects.filter(db_key="details")
    num = 0
    total = len(qs)
    fails = 0
    bad_dict_count = 0
    success = 0
    if total:
        print(f"\nConverting room details: {total} records.")
    for attr in qs:
        try:
            num += 1
            progress = num / total
            print(ProgressBar(progress, "Progress: "), end="\r", flush=True)
            objdb = attr.objectdb_set.all()[0]
            if not isinstance(attr.db_value, dict):
                attr.delete()
                fails += 1
                continue
            for name, description in attr.db_value.items():
                if not description or not name:
                    bad_dict_count += 1
                    continue
                try:
                    name = str(name)
                    description = str(description)
                except (TypeError, ValueError):
                    bad_dict_count += 1
                    continue
                RoomDetail.objects.update_or_create(
                    room=objdb,
                    name=name,
                    defaults={"description": description},
                )
                success += 1
            attr.delete()
        except IndexError:
            attr.delete()
    if total:
        print("\n")
        print(f"Total fails: {fails}")
        print(f"Total bad dicts: {bad_dict_count}")
        print(f"Total successes: {success}")


class Migration(migrations.Migration):

    dependencies = [
        ("objects", "0011_auto_20191025_0831"),
        ("room_extensions", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="RoomDetail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="room_details",
                        to="objects.ObjectDB",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Room Details",
                "unique_together": {("name", "room")},
            },
        ),
        migrations.RunPython(
            convert_room_details, migrations.RunPython.noop, elidable=True
        ),
    ]
